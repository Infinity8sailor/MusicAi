import { protocol } from "electron";
import { app, BrowserWindow, dialog, ipcMain } from "electron";
import { autoUpdater } from "electron-updater";

import log from "electron-log";
import MenuBuilder from "./menu";
import { getFiles } from "./io";
import { scanDir, startPlayer } from "./utils/file_utils";
const fs = require("fs");
const path = require("path");
const url = require("url");
const storage = require("electron-json-storage");

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

storage.getDataPath();
var player:any;

class AppUpdater {
  constructor() {
    log.transports.file.level = "info";
    autoUpdater.logger = log;
    autoUpdater.checkForUpdatesAndNotify();
  }
}

ipcMain.on("ipc-example", async (event, arg) => {
  const msgTemplate = (pingPong: string) => `IPC test: ${pingPong}`;
  console.log(msgTemplate(arg));
  event.reply("ipc-example", msgTemplate("pong"));
});

ipcMain.handle("get-files", () => {
  return getFiles();
});
ipcMain.on("dd", async (eve) => {
  console.log("got request to get songs");
  let savedPath = "E:\\Music";
  await storage.has("path", function (error: Error, hasKey: boolean) {
    if (error) throw error;
    if (hasKey) {
      return storage.get("path", function (error: Error, data: any) {
        if (error) throw error;
        console.log(data);
        savedPath = data.path.toString();
      });
    }
  });
  const data: any = await scanDir(savedPath);
  eve.reply("take", data);
});

ipcMain.on("get-saved-data", async (eve) => {
  console.log("got request to get saved songs");
  await storage.has("saved-data", function (error: Error, hasKey: boolean) {
    if (error) throw error;
    if (hasKey) {
      return storage.get("saved-data", function (error: Error, data: any) {
        if (error) throw error;
        // console.log(data);
        eve.reply("take", data);
      });
    }
  });
});

if (process.env.NODE_ENV === "production") {
  const sourceMapSupport = require("source-map-support");
  sourceMapSupport.install();
}

const isDebug =
  process.env.NODE_ENV === "development" || process.env.DEBUG_PROD === "true";

if (isDebug) {
  require("electron-debug")();
}

const installExtensions = async () => {
  const installer = require("electron-devtools-installer");
  const forceDownload = !!process.env.UPGRADE_EXTENSIONS;
  const extensions = ["REACT_DEVELOPER_TOOLS"];

  return installer
    .default(
      extensions.map((name) => installer[name]),
      forceDownload
    )
    .catch(console.log);
};

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

// const io = require("./main/io");
let mainWindow: BrowserWindow | null = null;

const createWindow = async () => {
  // if (isDebug) {
  //   await installExtensions();
  // }

  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 1080,
    width: 1920,
    // frame: false,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true,
      contextIsolation: true, // should be true to use context
      webSecurity: false,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  // watch files
  // io.watchFiles(mainWindow);
  const menuBuilder = new MenuBuilder(mainWindow);
  menuBuilder.buildMenu();

  // Remove this if your app does not use auto updates
  // eslint-disable-next-line
  new AppUpdater();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});


app.whenReady().then(() => {
  protocol.registerFileProtocol('file', (request, callback) => {
    const pathname = decodeURI(request.url.replace('file:///', ''));
    callback(pathname);
  });
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
export function openFolderDialog() {
  console.log("dialog for open folder ...");
  dialog.showOpenDialog(mainWindow!, { properties: ["openDirectory"] }).then(
    (result) => {
      console.log("folder selected...");
      const filePath = result.filePaths[0];
      if (filePath) {
        storage.set("path", { path: filePath }, function (error: Error) {
          if (error) throw error;
          console.log("path sett");
        });
        // scanDir(filePath);
      }
    },
    (error) => {
      throw error;
    }
  );
}
